#include <include/common.almfx>

RaytracingAccelerationStructure accelerationStructure : register(t0, space1);
RWTexture2D<float4> shadowmap : register(u0, space1);
Texture2D<float> depthTarget : register(t1, space1);

struct Payload
{
    float3 hitValue;
};

struct Attributes
{
    float2 bary;
};


[shader("raygeneration")]
void RayGenerationRS()
{
    uint3 LaunchID = DispatchRaysIndex();
    uint3 LaunchSize = DispatchRaysDimensions();
    
    shadowmap[int2(LaunchID.x, LaunchID.y)] = float4(1, 1, 1, 1);
    
    float2 screenTc = (float2(LaunchID.xy) + 0.5f) * PerFrame.screenSize.zw;
    int3 samp = int3(LaunchID.x, LaunchID.y, 0);
    
    float3 position = WorldPosFromDepth(screenTc, depthTarget.Load(samp).x);
    if (length(position) > 0)
    {
        RayDesc rayDesc;
        rayDesc.Origin = position;
        rayDesc.Direction = -(normalize(PerFrame.directionLight.xyz));
        rayDesc.TMin = 0.65;
        rayDesc.TMax = 10000;

        Payload payload;
        TraceRay(accelerationStructure, RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, 0xFF, 0, 0, 0, rayDesc, payload);
        
        shadowmap[int2(LaunchID.x, LaunchID.y)] = float4(payload.hitValue, 1);
    }    
}

[shader("closesthit")]
void CloseHitRS(inout Payload payload, in Attributes attribs)
{
    payload.hitValue = float3(0, 0, 0);
}

[shader("miss")]
void MissRS(inout Payload payload)
{
    payload.hitValue = float3(1, 1, 1);
}