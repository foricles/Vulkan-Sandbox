#include <include/common.almfx>

struct SkyOUT
{
    float4 position : SV_POSITION;
    float3 cubeCoords : POSITION1;
};

SamplerState pointsampler : register(s0, space1);
TextureCube skyboxCube : register(t0, space1);


SkyOUT MainVS(uint vid : SV_VertexID)
{
    const float3 vertices[] =
    {
        //Top
        {-1, 1, -1}, //0
        { 1, 1, -1}, //1
        {-1, 1,  1}, //2
        { 1, 1,  1}, //3

        //Bottom
        {-1, -1, -1}, //4
        { 1, -1, -1}, //5
        {-1, -1,  1}, //6
        { 1, -1,  1}, //7

        //Front
        {-1,  1, 1}, //8
        { 1,  1, 1}, //9
        {-1, -1, 1}, //10
        { 1, -1, 1}, //11

        //Back
        {-1,  1, -1}, //12
        { 1,  1, -1}, //13
        {-1, -1, -1}, //14
        { 1, -1, -1}, //15

        //Left
        {-1,  1,  1}, //16
        {-1,  1, -1}, //17
        {-1, -1,  1}, //18
        {-1, -1, -1}, //19

        //Right
        {1,  1,  1}, //20
        {1,  1, -1}, //21
        {1, -1,  1}, //22
        {1, -1, -1} //23
    };
    
    SkyOUT skyout = (SkyOUT) 0;
    
    const float3 viewSpace = mul(vertices[vid] * 10000.f, (float3x3)PerFrame.view );
    const float4 vertProj = mul(float4(viewSpace, 1), PerFrame.proj);
    
    skyout.position = vertProj.xyww;
    skyout.cubeCoords = vertices[vid];
    skyout.position.y = -skyout.position.y;
    skyout.cubeCoords.y = -skyout.cubeCoords.y;
    return skyout;
}


float4 MainPS(SkyOUT skyin) : SV_Target
{
    return skyboxCube.Sample(pointsampler, skyin.cubeCoords);
}