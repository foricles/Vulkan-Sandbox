#include <include/common.almfx>

#define EDGE_THRESHOLD_MIN 0.0312f
#define EDGE_THRESHOLD_MAX 0.125f
#define ITERATIONS 12
#define SUBPIXEL_QUALITY 0.75f

SamplerState pointsampler : register(s0, space1);
SamplerState linearsampler : register(s1, space1);
Texture2D hdrTarget : register(t0, space1);

float4 MainVS(uint vid : SV_VertexID) : SV_POSITION
{
    const float4 vertices[] =
    {
        { -1, -1, 0, 0 },
        { -1, 1, 0, 0 },
        { 1, 1, 0, 0 },
        { 1, -1, 0, 0 }
    };
    return vertices[vid];
}

inline float3 GetHdrTextureOffset(float2 uv, float xoffset, float yoffset)
{
    const float2 invOffset = float2(xoffset, yoffset) * PerFrame.screenSize.zw;
    return hdrTarget.Sample(linearsampler, uv + invOffset).rgb;
}

inline float3 ApplyFXAA(float2 screenTc, float3 colorCenter)
{
    const float lumaCenter =    RgbToLuma(colorCenter);
    const float lumaDown =      RgbToLuma(GetHdrTextureOffset(screenTc,  0, -1));
    const float lumaUp =        RgbToLuma(GetHdrTextureOffset(screenTc,  0,  1));
    const float lumaLeft =      RgbToLuma(GetHdrTextureOffset(screenTc, -1,  0));
    const float lumaRight =     RgbToLuma(GetHdrTextureOffset(screenTc,  1,  0));
    
    const float lumaMin = min(lumaCenter, min(min(lumaDown, lumaUp), min(lumaLeft, lumaRight)));
    const float lumaMax = max(lumaCenter, max(max(lumaDown, lumaUp), max(lumaLeft, lumaRight)));
    
    const float lumaRange = lumaMax - lumaMin;
    
    if (lumaRange < max(EDGE_THRESHOLD_MIN, lumaMax * EDGE_THRESHOLD_MAX))
    {
        return colorCenter;
    }
    
    const float lumaDownLeft =    RgbToLuma(GetHdrTextureOffset(screenTc, -1, -1));
    const float lumaUpRight =     RgbToLuma(GetHdrTextureOffset(screenTc,  1,  1));
    const float lumaUpLeft =      RgbToLuma(GetHdrTextureOffset(screenTc, -1,  1));
    const float lumaDownRight =   RgbToLuma(GetHdrTextureOffset(screenTc,  1, -1));
    
    const float lumaDownUp = lumaDown + lumaUp;
    const float lumaLeftRight = lumaLeft + lumaRight;
    
    const float lumaLeftCorner = lumaDownLeft + lumaUpLeft;
    const float lumaDownCorner = lumaDownLeft + lumaDownRight;
    const float lumaRightCorner = lumaDownRight + lumaUpRight;
    const float lumaUpCorner = lumaUpRight + lumaUpLeft;
    
    const float edgeHorizontal = abs(-2.0 * lumaLeft + lumaLeftCorner) + abs(-2.0 * lumaCenter + lumaDownUp) * 2.0 + abs(-2.0 * lumaRight + lumaRightCorner);
    const float edgeVertical = abs(-2.0 * lumaUp + lumaUpCorner) + abs(-2.0 * lumaCenter + lumaLeftRight) * 2.0 + abs(-2.0 * lumaDown + lumaDownCorner);
    
    const bool isHorizontal = (edgeHorizontal >= edgeVertical);
    const float luma1 = isHorizontal ? lumaDown : lumaLeft;
    const float luma2 = isHorizontal ? lumaUp : lumaRight;
    float stepLength = isHorizontal ? PerFrame.screenSize.w : PerFrame.screenSize.z;
    
    const float gradient1 = luma1 - lumaCenter;
    const float gradient2 = luma2 - lumaCenter;
    
    const bool is1Steepest = abs(gradient1) >= abs(gradient2);
    
    const float gradientScaled = 0.25 * max(abs(gradient1), abs(gradient2));
    
    float lumaLocalAverage = 0.5 * (luma2 + lumaCenter);
    if (is1Steepest)
    {
        stepLength = -stepLength;
        lumaLocalAverage = 0.5 * (luma1 + lumaCenter);
    }

    float2 currentUv = screenTc;
    if (isHorizontal)
    {
        currentUv.y += stepLength * 0.5;
    }
    else
    {
        currentUv.x += stepLength * 0.5;
    }
    
    
    float2 offset = isHorizontal ? float2(PerFrame.screenSize.z, 0.0) : float2(0.0, PerFrame.screenSize.w);
    float2 uv1 = currentUv - offset;
    float2 uv2 = currentUv + offset;
    
    
    float lumaEnd1 = RgbToLuma(hdrTarget.Sample(linearsampler, uv1).rgb);
    float lumaEnd2 = RgbToLuma(hdrTarget.Sample(linearsampler, uv2).rgb);
    lumaEnd1 -= lumaLocalAverage;
    lumaEnd2 -= lumaLocalAverage;
    
    bool reached1 = abs(lumaEnd1) >= gradientScaled;
    bool reached2 = abs(lumaEnd2) >= gradientScaled;
    bool reachedBoth = reached1 && reached2;
    
    
    if (!reached1)
    {
        uv1 -= offset;
    }
    if (!reached2)
    {
        uv2 += offset;
    }
    
    const float QUALITY[] = { 1.5, 2.0, 2.0, 2.0, 2.0, 4.0, 8.0, 8.0, 8.0, 8.0 };
    if (!reachedBoth)
    {
        for (int i = 2; i < ITERATIONS; i++)
        {
            if (!reached1)
            {
                lumaEnd1 = RgbToLuma(hdrTarget.Sample(linearsampler, uv1).rgb);
                lumaEnd1 = lumaEnd1 - lumaLocalAverage;
            }

            if (!reached2)
            {
                lumaEnd2 = RgbToLuma(hdrTarget.Sample(linearsampler, uv2).rgb);
                lumaEnd2 = lumaEnd2 - lumaLocalAverage;
            }

            reached1 = abs(lumaEnd1) >= gradientScaled;
            reached2 = abs(lumaEnd2) >= gradientScaled;
            reachedBoth = reached1 && reached2;

            
            if (!reached1)
            {
                uv1 -= offset * QUALITY[i];
            }
            if (!reached2)
            {
                uv2 += offset * QUALITY[i];
            }

            
            if (reachedBoth)
            {
                break;
            }
        }
    }
    


    float distance1 = isHorizontal ? (screenTc.x - uv1.x) : (screenTc.y - uv1.y);
    float distance2 = isHorizontal ? (uv2.x - screenTc.x) : (uv2.y - screenTc.y);

    
    bool isDirection1 = distance1 < distance2;
    float distanceFinal = min(distance1, distance2);
    float edgeThickness = (distance1 + distance2);
    float pixelOffset = -distanceFinal / edgeThickness + 0.5;
    
    bool isLumaCenterSmaller = lumaCenter < lumaLocalAverage;
    bool correctVariation = ((isDirection1 ? lumaEnd1 : lumaEnd2) < 0.0) != isLumaCenterSmaller;
    float finalOffset = correctVariation ? pixelOffset : 0.0;
    
    float lumaAverage = (1.0 / 12.0) * (2.0 * (lumaDownUp + lumaLeftRight) + lumaLeftCorner + lumaRightCorner);
    float subPixelOffset1 = clamp(abs(lumaAverage - lumaCenter) / lumaRange, 0.0, 1.0);
    float subPixelOffset2 = (-2.0 * subPixelOffset1 + 3.0) * subPixelOffset1 * subPixelOffset1;

    float subPixelOffsetFinal = subPixelOffset2 * subPixelOffset2 * SUBPIXEL_QUALITY;

    finalOffset = max(finalOffset, subPixelOffsetFinal);
    

    float2 finalUv = screenTc;
    if (isHorizontal)
    {
        finalUv.y += finalOffset * stepLength;
    }
    else
    {
        finalUv.x += finalOffset * stepLength;
    }

    
    float3 finalColor = hdrTarget.Sample(linearsampler, finalUv).rgb;
    
    return finalColor;
}

inline float3 ApplyTonemapping(float3 hdrColor)
{
    const float gamma = PerFrame.hdrTonemap.x;
    const float exposure = PerFrame.hdrTonemap.y;
    
    const float3 mapped = 1.0f - exp(-hdrColor * exposure);
    
    return pow(mapped, 1.0f / gamma);
}

float4 MainPS(float4 position : SV_POSITION) : SV_Target
{
    const float2 screenTc = position.xy * PerFrame.screenSize.zw;

    float3 hdrColor = hdrTarget.Sample(pointsampler, screenTc).xyz;
    
    hdrColor = ApplyFXAA(screenTc, hdrColor);
    
    return float4(ApplyTonemapping(hdrColor), 1);
}